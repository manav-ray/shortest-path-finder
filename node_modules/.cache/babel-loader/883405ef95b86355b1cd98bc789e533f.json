{"ast":null,"code":"var _jsxFileName = \"/Users/manavray/code/shortest-path-finder/src/components/Grid.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Point } from './../Objects/Point';\nimport Node from './Node';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function () {\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    initGrid(50, 50);\n  }, []);\n  /**\n   * Initializes an empty grid.\n   * \n   * @param {*} rows # of rows\n   * @param {*} cols # of columns.\n   */\n\n  const initGrid = (rows, cols) => {\n    const tempGrid = [];\n\n    for (let i = 0; i < rows; i++) {\n      const currRow = [];\n\n      for (let j = 0; j < cols; j++) {\n        currRow.push(new Point(i, j));\n      }\n\n      tempGrid.push(currRow);\n    }\n\n    setGrid(tempGrid);\n  };\n  /**\n   * Let's react render the pathfinding grid.\n   */\n\n\n  const renderGrid = () => {\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: grid.map((row, rowId) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: row.map((col, colId) => {\n            return /*#__PURE__*/_jsxDEV(Node, {}, colId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this);\n          })\n        }, rowId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"Hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), renderGrid]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/Users/manavray/code/shortest-path-finder/src/components/Grid.js"],"names":["React","useEffect","useState","Point","Node","grid","setGrid","initGrid","rows","cols","tempGrid","i","currRow","j","push","renderGrid","map","row","rowId","col","colId","color"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,KAAR,QAAoB,oBAApB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,eAAe,YAAY;AAEvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ,CAAC,EAAD,EAAK,EAAL,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAKA;AACJ;AACA;AACA;AACA;AACA;;AACI,QAAMA,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC7B,UAAMC,QAAQ,GAAG,EAAjB;;AAEA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,IAAnB,EAAyBG,CAAC,EAA1B,EAA8B;AAC1B,YAAMC,OAAO,GAAG,EAAhB;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,IAAnB,EAAyBI,CAAC,EAA1B,EAA8B;AAC1BD,QAAAA,OAAO,CAACE,IAAR,CAAa,IAAIX,KAAJ,CAAUQ,CAAV,EAAaE,CAAb,CAAb;AACH;;AAEDH,MAAAA,QAAQ,CAACI,IAAT,CAAcF,OAAd;AACH;;AAEDN,IAAAA,OAAO,CAACI,QAAD,CAAP;AACH,GAbD;AAgBA;AACJ;AACA;;;AACI,QAAMK,UAAU,GAAG,MAAM;AACrB;AAAA;AAAA,gBACKV,IAAI,CAACW,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtB,4BACI;AAAA,oBACKD,GAAG,CAACD,GAAJ,CAAQ,CAACG,GAAD,EAAMC,KAAN,KAAgB;AACrB,gCACI,QAAC,IAAD,MAAWA,KAAX;AAAA;AAAA;AAAA;AAAA,oBADJ;AAGH,WAJA;AADL,WAAUF,KAAV;AAAA;AAAA;AAAA;AAAA,gBADJ;AASH,OAVA;AADL;AAAA;AAAA;AAAA;AAAA;AAaH,GAdD;;AAgBA,sBACI;AAAA,4BACI;AAAI,MAAA,KAAK,EAAE;AAACG,QAAAA,KAAK,EAAE;AAAR,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKN,UAFL;AAAA,kBADJ;AAMH","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Point} from './../Objects/Point';\nimport Node from './Node';\n\nexport default function () {\n\n    const [grid, setGrid] = useState([]);\n\n    useEffect(() => { \n        initGrid(50, 50);\n    }, [])\n\n    \n    /**\n     * Initializes an empty grid.\n     * \n     * @param {*} rows # of rows\n     * @param {*} cols # of columns.\n     */\n    const initGrid = (rows, cols) => {\n        const tempGrid = [];\n\n        for(let i = 0; i < rows; i++) {\n            const currRow = [];\n            for(let j = 0; j < cols; j++) {\n                currRow.push(new Point(i, j));\n            }   \n\n            tempGrid.push(currRow);\n        }\n\n        setGrid(tempGrid);\n    }\n\n\n    /**\n     * Let's react render the pathfinding grid.\n     */\n    const renderGrid = () => {\n        <div>\n            {grid.map((row, rowId) => {\n                return (\n                    <div key={rowId}>\n                        {row.map((col, colId) => {\n                            return (\n                                <Node key={colId} />\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    }\n    \n    return (\n        <>\n            <h1 style={{color: 'white'}}>Hello</h1>\n            {renderGrid}\n        </>    \n    )\n}"]},"metadata":{},"sourceType":"module"}