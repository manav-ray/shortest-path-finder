{"ast":null,"code":"/**\n * Main breadth first search function.\n * \n * @param {*} startPoint starting point.\n * @param {*} endPoint ending point.\n * @param {*} grid whole grid.\n * @returns all visited points part of bfs in order.\n */\nexport const breadthFirstSearch = (startPoint, endPoint, grid) => {\n  // console.log(\"YEEEEE\");\n  var pointsInOrder = [];\n  startPoint.setDistance(0);\n  const unvisited = getAllPoints(grid);\n  return pointsInOrder;\n};\n/**\n * Returns all points in grid, as an array.\n * @param {*} grid whole grid. \n * @returns all points as an array.\n */\n\nconst getAllPoints = grid => {\n  const points = [];\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      points.push(grid[i][j]);\n    }\n  }\n\n  return points;\n};","map":{"version":3,"sources":["/Users/manavray/code/shortest-path-finder/src/algorithms/bfs.js"],"names":["breadthFirstSearch","startPoint","endPoint","grid","pointsInOrder","setDistance","unvisited","getAllPoints","points","i","length","j","push"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAG,CAACC,UAAD,EAAaC,QAAb,EAAuBC,IAAvB,KAAgC;AAC9D;AACA,MAAIC,aAAa,GAAG,EAApB;AACAH,EAAAA,UAAU,CAACI,WAAX,CAAuB,CAAvB;AACA,QAAMC,SAAS,GAAGC,YAAY,CAACJ,IAAD,CAA9B;AAGA,SAAOC,aAAP;AACH,CARM;AAUP;AACA;AACA;AACA;AACA;;AACA,MAAMG,YAAY,GAAIJ,IAAD,IAAU;AAC3B,QAAMK,MAAM,GAAG,EAAf;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGN,IAAI,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,SAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,IAAI,CAACM,CAAD,CAAJ,CAAQC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpCH,MAAAA,MAAM,CAACI,IAAP,CAAYT,IAAI,CAACM,CAAD,CAAJ,CAAQE,CAAR,CAAZ;AACH;AACJ;;AAED,SAAOH,MAAP;AACH,CATD","sourcesContent":["\n/**\n * Main breadth first search function.\n * \n * @param {*} startPoint starting point.\n * @param {*} endPoint ending point.\n * @param {*} grid whole grid.\n * @returns all visited points part of bfs in order.\n */\nexport const breadthFirstSearch = (startPoint, endPoint, grid) => {\n    // console.log(\"YEEEEE\");\n    var pointsInOrder = []\n    startPoint.setDistance(0);\n    const unvisited = getAllPoints(grid);\n\n\n    return pointsInOrder;\n}\n\n/**\n * Returns all points in grid, as an array.\n * @param {*} grid whole grid. \n * @returns all points as an array.\n */\nconst getAllPoints = (grid) => {\n    const points = [];\n    for(let i = 0; i < grid.length; i++) {\n        for(let j = 0; j < grid[i].length; j++) {\n            points.push(grid[i][j]);\n        }\n    }\n\n    return points;\n}"]},"metadata":{},"sourceType":"module"}