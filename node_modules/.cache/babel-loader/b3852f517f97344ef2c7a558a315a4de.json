{"ast":null,"code":"var _jsxFileName = \"/Users/manavray/code/shortest-path-finder/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Point } from './../Objects/Point';\nimport Node from './Node';\nimport { Button } from 'react-bootstrap';\nimport './../main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Grid() {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [numSpecials, setNumSpecials] = useState(0);\n  useEffect(() => {\n    initGrid(30, 80);\n  }, []);\n  /**\n   * Initializes an empty grid.\n   * \n   * @param {*} rows # of rows\n   * @param {*} cols # of columns.\n   */\n\n  const initGrid = (rows, cols) => {\n    const tempGrid = [];\n\n    for (let i = 0; i < rows; i++) {\n      const currRow = [];\n\n      for (let j = 0; j < cols; j++) {\n        currRow.push(new Point(i, j));\n      }\n\n      tempGrid.push(currRow);\n    }\n\n    setGrid(tempGrid);\n  };\n  /**\n   * Calls and visualizes the breadth first search algorithm.\n   */\n\n\n  const bfs = () => {\n    var startPoint = null;\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j].isStart) {} else if (grid[i][j].isEnd) {}\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pathfinding Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        marginBottom: '15px'\n      },\n      onClick: bfs,\n      children: \"Breadth First Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: grid.map((row, rowId) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rowContainer\",\n          children: row.map((col, colId) => {\n            return /*#__PURE__*/_jsxDEV(Node, {\n              point: grid[rowId][colId],\n              numSpecials: numSpecials,\n              setNumSpecials: setNumSpecials\n            }, colId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 37\n            }, this);\n          })\n        }, rowId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Grid, \"jN6kES+7pTRTzyH6X/lHrF1zB+E=\");\n\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/manavray/code/shortest-path-finder/src/components/Grid.js"],"names":["React","useEffect","useState","Point","Node","Button","Grid","grid","setGrid","numSpecials","setNumSpecials","initGrid","rows","cols","tempGrid","i","currRow","j","push","bfs","startPoint","length","isStart","isEnd","marginBottom","map","row","rowId","col","colId"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {Point} from './../Objects/Point';\nimport Node from './Node';\nimport {Button} from 'react-bootstrap';\nimport './../main.css'\n\nexport default function Grid () {\n\n    const [grid, setGrid] = useState([]);\n    const [numSpecials, setNumSpecials] = useState(0);\n\n\n    useEffect(() => { \n        initGrid(30, 80);\n    }, [])\n\n    \n    /**\n     * Initializes an empty grid.\n     * \n     * @param {*} rows # of rows\n     * @param {*} cols # of columns.\n     */\n    const initGrid = (rows, cols) => {\n        const tempGrid = [];\n\n        for(let i = 0; i < rows; i++) {\n            const currRow = [];\n            for(let j = 0; j < cols; j++) {\n                currRow.push(new Point(i, j));\n            }   \n\n            tempGrid.push(currRow);\n        }\n\n        setGrid(tempGrid);\n    }\n\n\n    /**\n     * Calls and visualizes the breadth first search algorithm.\n     */\n    const bfs = () => { \n        var startPoint = null;\n\n        for(let i = 0; i < grid.length; i++) {\n            for(let j = 0; j < grid[i].length; j++) {\n                if(grid[i][j].isStart) {\n\n                }\n                else if(grid[i][j].isEnd) {\n\n                }\n            }\n        }\n    }\n    \n    return (\n        <div className=\"container\">\n            <h1>Pathfinding Visualizer</h1>\n            <br/>\n            <Button style={{marginBottom: '15px'}} onClick={bfs}>Breadth First Search</Button>\n            <div>\n                {grid.map((row, rowId) => {\n                    return (\n                        <div key={rowId} className=\"rowContainer\">\n                            {row.map((col, colId) => {\n                                return (\n                                    <Node key={colId} point={grid[rowId][colId]} numSpecials={numSpecials} setNumSpecials={setNumSpecials} />\n                                )\n                            })}\n                        </div>\n                    )\n                    })}\n            </div>\n        </div>    \n    )\n}"]},"metadata":{},"sourceType":"module"}